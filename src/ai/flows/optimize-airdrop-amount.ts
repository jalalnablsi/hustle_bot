// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow to optimize airdrop amounts for the HustleSoul cryptocurrency.
 *
 * - optimizeAirdropAmount - A function that suggests optimal airdrop amounts based on user engagement and currency distribution data.
 * - OptimizeAirdropAmountInput - The input type for the optimizeAirdropAmount function.
 * - OptimizeAirdropAmountOutput - The return type for the optimizeAirdropAmount function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Define the input schema for the flow
const OptimizeAirdropAmountInputSchema = z.object({
  totalCurrencySupply: z.number().describe('The total supply of HustleSoul currency.'),
  activeUserCount: z.number().describe('The number of active users in the airdrop program.'),
  dailyRewardBudget: z.number().describe('The total budget allocated for daily rewards.'),
  referralRewardBudget: z.number().describe('The total budget allocated for referral rewards.'),
  socialTaskRewardBudget: z.number().describe('The total budget allocated for social task rewards.'),
  averageTaskCompletionRate: z.number().describe('The average rate at which users complete social tasks (0-1).'),
  averageReferralsPerUser: z.number().describe('The average number of referrals per user.'),
});

export type OptimizeAirdropAmountInput = z.infer<typeof OptimizeAirdropAmountInputSchema>;

// Define the output schema for the flow
const OptimizeAirdropAmountOutputSchema = z.object({
  suggestedDailyRewardAmount: z
    .number()
    .describe('The suggested amount of HustleSoul to airdrop for daily rewards.'),
  suggestedReferralRewardAmount: z
    .number()
    .describe('The suggested amount of HustleSoul to airdrop for each referral.'),
  suggestedSocialTaskRewardAmount: z
    .number()
    .describe('The suggested amount of HustleSoul to airdrop for completing social tasks.'),
  analysis: z
    .string()
    .describe('An explanation of the suggested airdrop amounts, considering user engagement and currency distribution.'),
});

export type OptimizeAirdropAmountOutput = z.infer<typeof OptimizeAirdropAmountOutputSchema>;

// Define the tool to get current currency statistics
const getCurrencyStats = ai.defineTool({
  name: 'getCurrencyStats',
  description: 'Retrieves current statistics about the HustleSoul currency, including total supply, active users, and budget allocations.',
  inputSchema: z.object({}),
  outputSchema: z.object({
    totalCurrencySupply: z.number().describe('The total supply of HustleSoul currency.'),
    activeUserCount: z.number().describe('The number of active users in the airdrop program.'),
    dailyRewardBudget: z.number().describe('The total budget allocated for daily rewards.'),
    referralRewardBudget: z.number().describe('The total budget allocated for referral rewards.'),
    socialTaskRewardBudget: z.number().describe('The total budget allocated for social task rewards.'),
  }),
},
async () => {
  // TODO: Implement the logic to fetch currency statistics from Supabase
  console.warn('getCurrencyStats tool is not yet implemented, returning placeholder values.');
  return {
    totalCurrencySupply: 1000000,
    activeUserCount: 1000,
    dailyRewardBudget: 10000,
    referralRewardBudget: 5000,
    socialTaskRewardBudget: 5000,
  };
});

// Define the prompt for the flow
const optimizeAirdropAmountPrompt = ai.definePrompt({
  name: 'optimizeAirdropAmountPrompt',
  input: {schema: OptimizeAirdropAmountInputSchema},
  output: {schema: OptimizeAirdropAmountOutputSchema},
  tools: [getCurrencyStats],
  prompt: `You are an expert in cryptocurrency airdrop economics. Analyze the following data to determine the optimal airdrop amounts for HustleSoul currency.

Consider user engagement, currency distribution, and budget constraints to maximize user participation and minimize currency inflation.

Total Currency Supply: {{{totalCurrencySupply}}}
Active User Count: {{{activeUserCount}}}
Daily Reward Budget: {{{dailyRewardBudget}}}
Referral Reward Budget: {{{referralRewardBudget}}}
Social Task Reward Budget: {{{socialTaskRewardBudget}}}
Average Task Completion Rate: {{{averageTaskCompletionRate}}}
Average Referrals Per User: {{{averageReferralsPerUser}}}

Based on this data, suggest the optimal airdrop amounts for:

- Daily Rewards
- Referrals
- Social Tasks

Explain your reasoning for each suggested amount.

If the user did not supply all the inputs, use the getCurrencyStats tool to get
the totalCurrencySupply, activeUserCount, dailyRewardBudget, referralRewardBudget,
and socialTaskRewardBudget.
`,
});

// Define the flow
const optimizeAirdropAmountFlow = ai.defineFlow(
  {
    name: 'optimizeAirdropAmountFlow',
    inputSchema: OptimizeAirdropAmountInputSchema,
    outputSchema: OptimizeAirdropAmountOutputSchema,
  },
  async input => {
    // If any of the currency stats are missing, use the tool to get them.
    if (!input.totalCurrencySupply || !input.activeUserCount || !input.dailyRewardBudget || !input.referralRewardBudget || !input.socialTaskRewardBudget) {
      const currencyStats = await getCurrencyStats({});
      input = {
        ...input,
        ...currencyStats,
      };
    }
    const {output} = await optimizeAirdropAmountPrompt(input);
    return output!;
  }
);

/**
 * Analyzes user engagement and currency distribution data to determine the optimal airdrop amounts.
 * @param input - The input data for optimizing airdrop amounts.
 * @returns The suggested airdrop amounts and analysis.
 */
export async function optimizeAirdropAmount(input: OptimizeAirdropAmountInput): Promise<OptimizeAirdropAmountOutput> {
  return optimizeAirdropAmountFlow(input);
}
